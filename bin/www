#!/usr/bin/env node

/**
 * Module dependencies.
 */
global.APP_PATH = __dirname
global.APP_PORT = (function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
})(process.env.PORT || '8089')

global.APP_HOST =
  process.env.NODE_ENV === 'development'
    ? 'https://localhost:8089'
    : 'https://server.vaithuhay.com'

const debug = require('debug')('download-manager:server')

const server =
  process.env.NODE_ENV === 'development'
    ? require('../server-dist/app-build.dev')
    : require('../server-dist/app-build.prod')

/**
 * Listen on provided port, on all network interfaces.
 */
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind =
    typeof APP_PORT === 'string' ? 'Pipe ' + APP_PORT : 'Port ' + APP_PORT

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
